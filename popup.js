/*
   --------------------------------------------------------------------------
   Code for link-hover text boxes
   By Nicolas Honing
Usage: <a onmouseover="popup('popup content', width)">a link</a>
(width is optional - default is in CSS: #pup {width: x;},
escape " in content with &quot;)
Tutorial and support at http://nicolashoening.de?twocents&nr=8
--------------------------------------------------------------------------
*/


var minMargin = 15; // set how much minimal space there should be (in pixels)
// between the popup and everything else (borders, mouse)
var ready = false;  // we are ready when the mouse event is set up
var default_width = 200; // will be set to width from css in document.ready

/* Prepare popup and define the mouseover callback */
jQuery(document).ready(function(){
		$('body').append('<div id="pup" style="position:abolute; display:none; z-index:200;"></div>');
		css_width = $('#pup').width();
		if (css_width != 0) default_width = css_width;
		// set dynamic coords when the mouse moves
		$(document).mousemove(function(e){ 
			var x,y;

			x = $(document).scrollLeft() + e.clientX;
			y = $(document).scrollTop() + e.clientY;

			x += 10; // important: if the popup is where the mouse is, the hoverOver/hoverOut events flicker

			var x_y = nudge(x,y); // avoids edge overflow

			// remember: the popup is still hidden
			$('#pup').css('top', x_y[1] + 'px');
			$('#pup').css('left', x_y[0] + 'px');
			});
		ready = true;
		});

/*
   The actual callback:
   Write message, show popup w/ custom width if necessary,
   make sure it disappears on mouseout
   */
function popup(item, width)
{
	switch(item) {
		case "modem_macaddr":
			msg = "Modem MAC address without any punctuation";
		break;
		case "serialnum":
			msg = "Modem Serial Number, if you don't track serials just use the MAC here also";
		break;
		case "subnum":
			msg = "Subscriber identifier showing who this equipment belongs to";
		break;
		case "config_file":
			msg = "Static Config file generated externally and uploaded to the TFTP server.";
		break;
		case "dynamic_config_file":
			msg = "Config file to be generated by docsis_server.";
		break;
		case "nettype":
			msg = "either 'CM', 'CPE' or 'MTA'. The MTA is for future use.";
		break;
		case "cmts_ip":
			msg = "this what the GIADDR field will be when the DHCP packet is sent from the CMTS.";
		break;
		case "cmts_vlan":
			msg = "If you are using Cisco VRF then you can use this. otherwise just set everything to 1.";
		break;
		case "network":
			msg = "This is the network as specified with the network IP and a subnet mask.";
		break;
		case "gateway":
			msg = "This is the gateway for the network. This IP will usually be found on the cable interface of the CMTS.";
		break;
		case "grant_flag":
			msg = "If this is set to 'NO' the server will not give away IP addresses within this IP range. Usually set to 'NO' for CM ranges and set to 'YES' for CPE ranges. If you have a network set aside for businesses then you can manualy assign them to this network and not worry about the server giving them to regular customers.";
		break;
		case "dynamic_flag":
			msg = "If you set this to 'YES', when a lease expires on a CPE it requests an updated lease, the server will give the CPE a different IP address. In other words the CPE gets a different IP everytime his lease expires.";
		break;
		case "full_flag":
			msg = "When the server has exausted the all the IP addresses in this network it will update the full_flag with a 1 to prevent searching it needlessly.  The 'Delete_Old_Leases' can be used to remove old customer leases.  The 'Count_IPs' program will count all the unused IP addresses and update the full_flag if IPs are now available.";
		break;
		case "range_min":
			msg = "The Lowest IP address in this network to give away a lease for. I usually set the gateway to .1 and then the range_min to .2";
		break;
		case "range_max":
			msg = "The Highest IP address in this network to give away a lease for. I usually set this 1 less than the broadcast address of the net.";
		break;
		case "lease_time":
			msg = "The time in seconds for the lease of these IPs to last. 1 or 2 days is usually good. (1 day = 86400 seconds).";
		break;
		case "config_opt1":
			msg = "There are 3 pointers to the config_opts table. (1 of 3)";
		break;
		case "config_opt2":
			msg = "There are 3 pointers to the config_opts table. (2 of 3)";
		break;
		case "config_opt3":
			msg = "There are 3 pointers to the config_opts table. (3 of 3)";
		break;
		// config_dhcp stuff
		case "server_id":
			msg = "The config_nets table can point to a group of options grouped together by this server_id.";
		break;
		case "opt_id":
			msg = "A value from 0 to 255 that represents the data type needed.";
		break;
		case "opt_dtype":
			msg = "This enumerated type is one of the following, (IP, 2IP, INT8, UINT8, INT16, UINT16, INT32, UINT32, CHAR, SUB-OPT).";
		break;
		case "opt_value":
			msg = "The actual value that will be encoded. Either a string, an IP or an integer.";
		break;
		case "sub_opt":
			msg = "If a sub-option is needed this will be the id number.";
		break;
		case "comment":
			msg = "A text comment so that when you view the table you know what your looking at. Without comments its difficult to tell what value does what.";
		break;
		// Config file segments
		case "cfg_id":
			msg = "This is the id number used to identify the code snippet.";
		break;
		case "cfg_txt":
			msg = "the text of the config snippet.";
		break;
		case "cfg_errors":
			msg = "If their were errors trying to compile the snippet, they will show up here";
		break;
		case "cfg_update":
			msg = "A date/time stamp used to compare against the config_modem_bin table to see if the option needs to be recompiled.";
		break;
		default:
			msg = "Incomplete Context Entry";
			break;
	}

	if (ready) {
		// use default width if not customized here
		if (typeof width === "undefined"){
			width = default_width;
		}
		// write content and display
		$('#pup').html(msg).width(width).show();
		// make sure popup goes away on mouse out
		// the event obj needs to be gotten from the virtual 
		//   caller, since we use onmouseover='popup(msg)' 
		var t = getTarget(arguments.callee.caller.arguments[0]);
		$(t).unbind('mouseout').bind('mouseout', 
				function(e){
				$('#pup').hide().width(default_width);
				}
				);
	}
}

/* Avoid edge overflow */
function nudge(x,y)
{
	var win = $(window);

	// When the mouse is too far on the right, put window to the left
	var xtreme = $(document).scrollLeft() + win.width() - $('#pup').width() - minMargin;
	if(x > xtreme) {
		x -= $('#pup').width() + 2 * minMargin;
	}
	x = max(x, 0);

	// When the mouse is too far down, move window up
	if((y + $('#pup').height()) > (win.height() +  $(document).scrollTop())) {
		y -= $('#pup').height() + minMargin;
	}

	return [ x, y ];
}

/* custom max */
function max(a,b){
	if (a>b) return a;
	else return b;
}

/*
   Get the target (element) of an event.
   Inspired by quirksmode
   */
function getTarget(e) {
	var targ;
	if (!e) var e = window.event;
	if (e.target) targ = e.target;
	else if (e.srcElement) targ = e.srcElement;
	if (targ.nodeType == 3) // defeat Safari bug
		targ = targ.parentNode;
	return targ;
}
